def ticket_splitter(input_string):

    # input_string = "Based on the transcript, here are a few Jira tickets that could be created:\n\n1. Ticket Title: Agile Work Environment Integration\n   - Description: Investigate and implement features to align the solution with Telstra's agile work environment, such as support for different types of agile meetings and ceremonies.\n   - Assignee: Steven Yuen\n   - Priority: High\n\n2. Ticket Title: Contextual Output Generation\n   - Description: Develop functionality to use the transcripts of past meetings as context to generate more accurate and valuable output for future meetings.\n   - Assignee: Steven Yuen\n   - Priority: Medium\n\n3. Ticket Title: Centralized Dashboard\n   - Description: Create a centralized dashboard to manage and track all meetings and their associated artifacts, providing a seamless experience for users.\n   - Assignee: Steven Yuen\n   - Priority: Medium\n\n4. Ticket Title: Copilot Integration and Customization\n   - Description: Explore the possibility of integrating Telstra's solution with Copilot, tailoring it to meet specific business needs and leveraging the existing platform.\n   - Assignee: Jason Hong\n   - Priority: Medium\n\n5. Ticket Title: Meeting Minutes Tailoring\n   - Description: Modify the meeting minutes feature to align with different meeting types, such as retros, stand-ups, and ceremonies, to provide more relevant and useful outputs.\n   - Assignee: Chris Qu\n   - Priority: Low\n\nPlease note that these suggested tickets are based on the information provided in the transcript and may need to be adjusted based on further discussions and requirements."

    # Split the input string into sections based on '\n\n'
    sections = input_string.split('\n\n')

    to_return = []

    # Print each section in the list
    for i in range(1,len(sections)-1):


        # Split the input string into lines
        lines = sections[i].split('\n')

        # Initialize an empty dictionary to store the key-value pairs
        ticket_info = {}

        for line in lines:
            # Split each line into key and value using ':'
            key, value = line.strip().split(': ')
            # Remove leading and trailing spaces from the key and value
            key = key.strip()
            value = value.strip()
            # Add the key-value pair to the dictionary
            ticket_info[key] = value

        to_return.append(ticket_info)

    return to_return


def main():
    ticket_splitter("Based on the transcript, I would suggest the following Jira Tickets:\n\n1. Title: Develop Agile-focused Solution\n   Description: Create a solution that is tailored towards Telstra's agile work environment, including features that address the specific needs of agile ceremonies such as retros, stand-ups, and other recurring meetings.\n\n2. Title: Implement Context Window for Knowledge Accumulation\n   Description: Enhance the solution to utilize a context window that accumulates knowledge from past meetings, enabling the generation of more informed and personalized outputs over time.\n\n3. Title: Enhance Differentiation from Copilot\n   Description: Identify and implement key differentiating factors that distinguish the solution from Copilot, such as the centralized dashboard, integration with Telstra's ecosystem, and customization options for Telstra-specific requirements.\n\n4. Title: Optimize Ticket Generation for Agile Workflows\n   Description: Modify the existing ticket generation feature to align with agile workflows, ensuring that the generated tickets are useful for planning and tracking progress in agile ceremonies.\n\n5. Title: Conduct Research on Agile Work Environment\n   Description: Perform research on agile methodologies and Telstra's specific agile work environment to gain a better understanding of the challenges and requirements that need to be addressed by the solution.\n\n6. Title: Collaborate with Copilot for Integration\n   Description: Initiate discussions with the Copilot team to explore possibilities for integrating the solution with Copilot in the long term, leveraging the strategic partnership with Microsoft and maximizing the benefits of both platforms.\n\n7. Title: Gather Requirements Documentation\n   Description: Follow up with relevant stakeholders to collect and document any requirements or specifications that will guide the development of the solution.\n\nPlease note that these suggestions are based on the information provided in the transcript and may need to be adjusted based on additional context or requirements.")

if __name__ == '__main__':
    main()